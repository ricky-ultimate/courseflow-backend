
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Complaint` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Complaint
 * 
 */
export type ComplaintModel = runtime.Types.Result.DefaultSelection<Prisma.$ComplaintPayload>

export type AggregateComplaint = {
  _count: ComplaintCountAggregateOutputType | null
  _min: ComplaintMinAggregateOutputType | null
  _max: ComplaintMaxAggregateOutputType | null
}

export type ComplaintMinAggregateOutputType = {
  id: string | null
  userId: string | null
  name: string | null
  email: string | null
  department: string | null
  subject: string | null
  message: string | null
  status: $Enums.ComplaintStatus | null
  resolvedBy: string | null
  resolvedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ComplaintMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  name: string | null
  email: string | null
  department: string | null
  subject: string | null
  message: string | null
  status: $Enums.ComplaintStatus | null
  resolvedBy: string | null
  resolvedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ComplaintCountAggregateOutputType = {
  id: number
  userId: number
  name: number
  email: number
  department: number
  subject: number
  message: number
  status: number
  resolvedBy: number
  resolvedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ComplaintMinAggregateInputType = {
  id?: true
  userId?: true
  name?: true
  email?: true
  department?: true
  subject?: true
  message?: true
  status?: true
  resolvedBy?: true
  resolvedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ComplaintMaxAggregateInputType = {
  id?: true
  userId?: true
  name?: true
  email?: true
  department?: true
  subject?: true
  message?: true
  status?: true
  resolvedBy?: true
  resolvedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ComplaintCountAggregateInputType = {
  id?: true
  userId?: true
  name?: true
  email?: true
  department?: true
  subject?: true
  message?: true
  status?: true
  resolvedBy?: true
  resolvedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ComplaintAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Complaint to aggregate.
   */
  where?: Prisma.ComplaintWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Complaints to fetch.
   */
  orderBy?: Prisma.ComplaintOrderByWithRelationInput | Prisma.ComplaintOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ComplaintWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Complaints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Complaints.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Complaints
  **/
  _count?: true | ComplaintCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ComplaintMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ComplaintMaxAggregateInputType
}

export type GetComplaintAggregateType<T extends ComplaintAggregateArgs> = {
      [P in keyof T & keyof AggregateComplaint]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateComplaint[P]>
    : Prisma.GetScalarType<T[P], AggregateComplaint[P]>
}




export type ComplaintGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ComplaintWhereInput
  orderBy?: Prisma.ComplaintOrderByWithAggregationInput | Prisma.ComplaintOrderByWithAggregationInput[]
  by: Prisma.ComplaintScalarFieldEnum[] | Prisma.ComplaintScalarFieldEnum
  having?: Prisma.ComplaintScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ComplaintCountAggregateInputType | true
  _min?: ComplaintMinAggregateInputType
  _max?: ComplaintMaxAggregateInputType
}

export type ComplaintGroupByOutputType = {
  id: string
  userId: string | null
  name: string
  email: string
  department: string
  subject: string
  message: string
  status: $Enums.ComplaintStatus
  resolvedBy: string | null
  resolvedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: ComplaintCountAggregateOutputType | null
  _min: ComplaintMinAggregateOutputType | null
  _max: ComplaintMaxAggregateOutputType | null
}

type GetComplaintGroupByPayload<T extends ComplaintGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ComplaintGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ComplaintGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ComplaintGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ComplaintGroupByOutputType[P]>
      }
    >
  > 



export type ComplaintWhereInput = {
  AND?: Prisma.ComplaintWhereInput | Prisma.ComplaintWhereInput[]
  OR?: Prisma.ComplaintWhereInput[]
  NOT?: Prisma.ComplaintWhereInput | Prisma.ComplaintWhereInput[]
  id?: Prisma.StringFilter<"Complaint"> | string
  userId?: Prisma.StringNullableFilter<"Complaint"> | string | null
  name?: Prisma.StringFilter<"Complaint"> | string
  email?: Prisma.StringFilter<"Complaint"> | string
  department?: Prisma.StringFilter<"Complaint"> | string
  subject?: Prisma.StringFilter<"Complaint"> | string
  message?: Prisma.StringFilter<"Complaint"> | string
  status?: Prisma.EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
  resolvedBy?: Prisma.StringNullableFilter<"Complaint"> | string | null
  resolvedAt?: Prisma.DateTimeNullableFilter<"Complaint"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Complaint"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Complaint"> | Date | string
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type ComplaintOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  department?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  message?: Prisma.SortOrder
  status?: Prisma.SortOrder
  resolvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  resolvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type ComplaintWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ComplaintWhereInput | Prisma.ComplaintWhereInput[]
  OR?: Prisma.ComplaintWhereInput[]
  NOT?: Prisma.ComplaintWhereInput | Prisma.ComplaintWhereInput[]
  userId?: Prisma.StringNullableFilter<"Complaint"> | string | null
  name?: Prisma.StringFilter<"Complaint"> | string
  email?: Prisma.StringFilter<"Complaint"> | string
  department?: Prisma.StringFilter<"Complaint"> | string
  subject?: Prisma.StringFilter<"Complaint"> | string
  message?: Prisma.StringFilter<"Complaint"> | string
  status?: Prisma.EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
  resolvedBy?: Prisma.StringNullableFilter<"Complaint"> | string | null
  resolvedAt?: Prisma.DateTimeNullableFilter<"Complaint"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Complaint"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Complaint"> | Date | string
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "id">

export type ComplaintOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  department?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  message?: Prisma.SortOrder
  status?: Prisma.SortOrder
  resolvedBy?: Prisma.SortOrderInput | Prisma.SortOrder
  resolvedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ComplaintCountOrderByAggregateInput
  _max?: Prisma.ComplaintMaxOrderByAggregateInput
  _min?: Prisma.ComplaintMinOrderByAggregateInput
}

export type ComplaintScalarWhereWithAggregatesInput = {
  AND?: Prisma.ComplaintScalarWhereWithAggregatesInput | Prisma.ComplaintScalarWhereWithAggregatesInput[]
  OR?: Prisma.ComplaintScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ComplaintScalarWhereWithAggregatesInput | Prisma.ComplaintScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Complaint"> | string
  userId?: Prisma.StringNullableWithAggregatesFilter<"Complaint"> | string | null
  name?: Prisma.StringWithAggregatesFilter<"Complaint"> | string
  email?: Prisma.StringWithAggregatesFilter<"Complaint"> | string
  department?: Prisma.StringWithAggregatesFilter<"Complaint"> | string
  subject?: Prisma.StringWithAggregatesFilter<"Complaint"> | string
  message?: Prisma.StringWithAggregatesFilter<"Complaint"> | string
  status?: Prisma.EnumComplaintStatusWithAggregatesFilter<"Complaint"> | $Enums.ComplaintStatus
  resolvedBy?: Prisma.StringNullableWithAggregatesFilter<"Complaint"> | string | null
  resolvedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Complaint"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Complaint"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Complaint"> | Date | string
}

export type ComplaintCreateInput = {
  id?: string
  name: string
  email: string
  department: string
  subject: string
  message: string
  status?: $Enums.ComplaintStatus
  resolvedBy?: string | null
  resolvedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user?: Prisma.UserCreateNestedOneWithoutComplaintsInput
}

export type ComplaintUncheckedCreateInput = {
  id?: string
  userId?: string | null
  name: string
  email: string
  department: string
  subject: string
  message: string
  status?: $Enums.ComplaintStatus
  resolvedBy?: string | null
  resolvedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ComplaintUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  resolvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneWithoutComplaintsNestedInput
}

export type ComplaintUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  resolvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplaintCreateManyInput = {
  id?: string
  userId?: string | null
  name: string
  email: string
  department: string
  subject: string
  message: string
  status?: $Enums.ComplaintStatus
  resolvedBy?: string | null
  resolvedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ComplaintUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  resolvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplaintUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  resolvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplaintListRelationFilter = {
  every?: Prisma.ComplaintWhereInput
  some?: Prisma.ComplaintWhereInput
  none?: Prisma.ComplaintWhereInput
}

export type ComplaintOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ComplaintCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  department?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  message?: Prisma.SortOrder
  status?: Prisma.SortOrder
  resolvedBy?: Prisma.SortOrder
  resolvedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ComplaintMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  department?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  message?: Prisma.SortOrder
  status?: Prisma.SortOrder
  resolvedBy?: Prisma.SortOrder
  resolvedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ComplaintMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  email?: Prisma.SortOrder
  department?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  message?: Prisma.SortOrder
  status?: Prisma.SortOrder
  resolvedBy?: Prisma.SortOrder
  resolvedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ComplaintCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ComplaintCreateWithoutUserInput, Prisma.ComplaintUncheckedCreateWithoutUserInput> | Prisma.ComplaintCreateWithoutUserInput[] | Prisma.ComplaintUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ComplaintCreateOrConnectWithoutUserInput | Prisma.ComplaintCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ComplaintCreateManyUserInputEnvelope
  connect?: Prisma.ComplaintWhereUniqueInput | Prisma.ComplaintWhereUniqueInput[]
}

export type ComplaintUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ComplaintCreateWithoutUserInput, Prisma.ComplaintUncheckedCreateWithoutUserInput> | Prisma.ComplaintCreateWithoutUserInput[] | Prisma.ComplaintUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ComplaintCreateOrConnectWithoutUserInput | Prisma.ComplaintCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ComplaintCreateManyUserInputEnvelope
  connect?: Prisma.ComplaintWhereUniqueInput | Prisma.ComplaintWhereUniqueInput[]
}

export type ComplaintUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ComplaintCreateWithoutUserInput, Prisma.ComplaintUncheckedCreateWithoutUserInput> | Prisma.ComplaintCreateWithoutUserInput[] | Prisma.ComplaintUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ComplaintCreateOrConnectWithoutUserInput | Prisma.ComplaintCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ComplaintUpsertWithWhereUniqueWithoutUserInput | Prisma.ComplaintUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ComplaintCreateManyUserInputEnvelope
  set?: Prisma.ComplaintWhereUniqueInput | Prisma.ComplaintWhereUniqueInput[]
  disconnect?: Prisma.ComplaintWhereUniqueInput | Prisma.ComplaintWhereUniqueInput[]
  delete?: Prisma.ComplaintWhereUniqueInput | Prisma.ComplaintWhereUniqueInput[]
  connect?: Prisma.ComplaintWhereUniqueInput | Prisma.ComplaintWhereUniqueInput[]
  update?: Prisma.ComplaintUpdateWithWhereUniqueWithoutUserInput | Prisma.ComplaintUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ComplaintUpdateManyWithWhereWithoutUserInput | Prisma.ComplaintUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ComplaintScalarWhereInput | Prisma.ComplaintScalarWhereInput[]
}

export type ComplaintUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ComplaintCreateWithoutUserInput, Prisma.ComplaintUncheckedCreateWithoutUserInput> | Prisma.ComplaintCreateWithoutUserInput[] | Prisma.ComplaintUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ComplaintCreateOrConnectWithoutUserInput | Prisma.ComplaintCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ComplaintUpsertWithWhereUniqueWithoutUserInput | Prisma.ComplaintUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ComplaintCreateManyUserInputEnvelope
  set?: Prisma.ComplaintWhereUniqueInput | Prisma.ComplaintWhereUniqueInput[]
  disconnect?: Prisma.ComplaintWhereUniqueInput | Prisma.ComplaintWhereUniqueInput[]
  delete?: Prisma.ComplaintWhereUniqueInput | Prisma.ComplaintWhereUniqueInput[]
  connect?: Prisma.ComplaintWhereUniqueInput | Prisma.ComplaintWhereUniqueInput[]
  update?: Prisma.ComplaintUpdateWithWhereUniqueWithoutUserInput | Prisma.ComplaintUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ComplaintUpdateManyWithWhereWithoutUserInput | Prisma.ComplaintUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ComplaintScalarWhereInput | Prisma.ComplaintScalarWhereInput[]
}

export type EnumComplaintStatusFieldUpdateOperationsInput = {
  set?: $Enums.ComplaintStatus
}

export type ComplaintCreateWithoutUserInput = {
  id?: string
  name: string
  email: string
  department: string
  subject: string
  message: string
  status?: $Enums.ComplaintStatus
  resolvedBy?: string | null
  resolvedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ComplaintUncheckedCreateWithoutUserInput = {
  id?: string
  name: string
  email: string
  department: string
  subject: string
  message: string
  status?: $Enums.ComplaintStatus
  resolvedBy?: string | null
  resolvedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ComplaintCreateOrConnectWithoutUserInput = {
  where: Prisma.ComplaintWhereUniqueInput
  create: Prisma.XOR<Prisma.ComplaintCreateWithoutUserInput, Prisma.ComplaintUncheckedCreateWithoutUserInput>
}

export type ComplaintCreateManyUserInputEnvelope = {
  data: Prisma.ComplaintCreateManyUserInput | Prisma.ComplaintCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ComplaintUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ComplaintWhereUniqueInput
  update: Prisma.XOR<Prisma.ComplaintUpdateWithoutUserInput, Prisma.ComplaintUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ComplaintCreateWithoutUserInput, Prisma.ComplaintUncheckedCreateWithoutUserInput>
}

export type ComplaintUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ComplaintWhereUniqueInput
  data: Prisma.XOR<Prisma.ComplaintUpdateWithoutUserInput, Prisma.ComplaintUncheckedUpdateWithoutUserInput>
}

export type ComplaintUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ComplaintScalarWhereInput
  data: Prisma.XOR<Prisma.ComplaintUpdateManyMutationInput, Prisma.ComplaintUncheckedUpdateManyWithoutUserInput>
}

export type ComplaintScalarWhereInput = {
  AND?: Prisma.ComplaintScalarWhereInput | Prisma.ComplaintScalarWhereInput[]
  OR?: Prisma.ComplaintScalarWhereInput[]
  NOT?: Prisma.ComplaintScalarWhereInput | Prisma.ComplaintScalarWhereInput[]
  id?: Prisma.StringFilter<"Complaint"> | string
  userId?: Prisma.StringNullableFilter<"Complaint"> | string | null
  name?: Prisma.StringFilter<"Complaint"> | string
  email?: Prisma.StringFilter<"Complaint"> | string
  department?: Prisma.StringFilter<"Complaint"> | string
  subject?: Prisma.StringFilter<"Complaint"> | string
  message?: Prisma.StringFilter<"Complaint"> | string
  status?: Prisma.EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
  resolvedBy?: Prisma.StringNullableFilter<"Complaint"> | string | null
  resolvedAt?: Prisma.DateTimeNullableFilter<"Complaint"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Complaint"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Complaint"> | Date | string
}

export type ComplaintCreateManyUserInput = {
  id?: string
  name: string
  email: string
  department: string
  subject: string
  message: string
  status?: $Enums.ComplaintStatus
  resolvedBy?: string | null
  resolvedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ComplaintUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  resolvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplaintUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  resolvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ComplaintUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  department?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
  resolvedBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  resolvedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ComplaintSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  name?: boolean
  email?: boolean
  department?: boolean
  subject?: boolean
  message?: boolean
  status?: boolean
  resolvedBy?: boolean
  resolvedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.Complaint$userArgs<ExtArgs>
}, ExtArgs["result"]["complaint"]>

export type ComplaintSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  name?: boolean
  email?: boolean
  department?: boolean
  subject?: boolean
  message?: boolean
  status?: boolean
  resolvedBy?: boolean
  resolvedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.Complaint$userArgs<ExtArgs>
}, ExtArgs["result"]["complaint"]>

export type ComplaintSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  name?: boolean
  email?: boolean
  department?: boolean
  subject?: boolean
  message?: boolean
  status?: boolean
  resolvedBy?: boolean
  resolvedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.Complaint$userArgs<ExtArgs>
}, ExtArgs["result"]["complaint"]>

export type ComplaintSelectScalar = {
  id?: boolean
  userId?: boolean
  name?: boolean
  email?: boolean
  department?: boolean
  subject?: boolean
  message?: boolean
  status?: boolean
  resolvedBy?: boolean
  resolvedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ComplaintOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "name" | "email" | "department" | "subject" | "message" | "status" | "resolvedBy" | "resolvedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["complaint"]>
export type ComplaintInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Complaint$userArgs<ExtArgs>
}
export type ComplaintIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Complaint$userArgs<ExtArgs>
}
export type ComplaintIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Complaint$userArgs<ExtArgs>
}

export type $ComplaintPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Complaint"
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string | null
    name: string
    email: string
    department: string
    subject: string
    message: string
    status: $Enums.ComplaintStatus
    resolvedBy: string | null
    resolvedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["complaint"]>
  composites: {}
}

export type ComplaintGetPayload<S extends boolean | null | undefined | ComplaintDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ComplaintPayload, S>

export type ComplaintCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ComplaintFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ComplaintCountAggregateInputType | true
  }

export interface ComplaintDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Complaint'], meta: { name: 'Complaint' } }
  /**
   * Find zero or one Complaint that matches the filter.
   * @param {ComplaintFindUniqueArgs} args - Arguments to find a Complaint
   * @example
   * // Get one Complaint
   * const complaint = await prisma.complaint.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ComplaintFindUniqueArgs>(args: Prisma.SelectSubset<T, ComplaintFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ComplaintClient<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Complaint that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ComplaintFindUniqueOrThrowArgs} args - Arguments to find a Complaint
   * @example
   * // Get one Complaint
   * const complaint = await prisma.complaint.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ComplaintFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ComplaintFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ComplaintClient<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Complaint that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintFindFirstArgs} args - Arguments to find a Complaint
   * @example
   * // Get one Complaint
   * const complaint = await prisma.complaint.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ComplaintFindFirstArgs>(args?: Prisma.SelectSubset<T, ComplaintFindFirstArgs<ExtArgs>>): Prisma.Prisma__ComplaintClient<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Complaint that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintFindFirstOrThrowArgs} args - Arguments to find a Complaint
   * @example
   * // Get one Complaint
   * const complaint = await prisma.complaint.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ComplaintFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ComplaintFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ComplaintClient<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Complaints that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Complaints
   * const complaints = await prisma.complaint.findMany()
   * 
   * // Get first 10 Complaints
   * const complaints = await prisma.complaint.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const complaintWithIdOnly = await prisma.complaint.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ComplaintFindManyArgs>(args?: Prisma.SelectSubset<T, ComplaintFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Complaint.
   * @param {ComplaintCreateArgs} args - Arguments to create a Complaint.
   * @example
   * // Create one Complaint
   * const Complaint = await prisma.complaint.create({
   *   data: {
   *     // ... data to create a Complaint
   *   }
   * })
   * 
   */
  create<T extends ComplaintCreateArgs>(args: Prisma.SelectSubset<T, ComplaintCreateArgs<ExtArgs>>): Prisma.Prisma__ComplaintClient<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Complaints.
   * @param {ComplaintCreateManyArgs} args - Arguments to create many Complaints.
   * @example
   * // Create many Complaints
   * const complaint = await prisma.complaint.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ComplaintCreateManyArgs>(args?: Prisma.SelectSubset<T, ComplaintCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Complaints and returns the data saved in the database.
   * @param {ComplaintCreateManyAndReturnArgs} args - Arguments to create many Complaints.
   * @example
   * // Create many Complaints
   * const complaint = await prisma.complaint.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Complaints and only return the `id`
   * const complaintWithIdOnly = await prisma.complaint.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ComplaintCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ComplaintCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Complaint.
   * @param {ComplaintDeleteArgs} args - Arguments to delete one Complaint.
   * @example
   * // Delete one Complaint
   * const Complaint = await prisma.complaint.delete({
   *   where: {
   *     // ... filter to delete one Complaint
   *   }
   * })
   * 
   */
  delete<T extends ComplaintDeleteArgs>(args: Prisma.SelectSubset<T, ComplaintDeleteArgs<ExtArgs>>): Prisma.Prisma__ComplaintClient<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Complaint.
   * @param {ComplaintUpdateArgs} args - Arguments to update one Complaint.
   * @example
   * // Update one Complaint
   * const complaint = await prisma.complaint.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ComplaintUpdateArgs>(args: Prisma.SelectSubset<T, ComplaintUpdateArgs<ExtArgs>>): Prisma.Prisma__ComplaintClient<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Complaints.
   * @param {ComplaintDeleteManyArgs} args - Arguments to filter Complaints to delete.
   * @example
   * // Delete a few Complaints
   * const { count } = await prisma.complaint.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ComplaintDeleteManyArgs>(args?: Prisma.SelectSubset<T, ComplaintDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Complaints.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Complaints
   * const complaint = await prisma.complaint.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ComplaintUpdateManyArgs>(args: Prisma.SelectSubset<T, ComplaintUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Complaints and returns the data updated in the database.
   * @param {ComplaintUpdateManyAndReturnArgs} args - Arguments to update many Complaints.
   * @example
   * // Update many Complaints
   * const complaint = await prisma.complaint.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Complaints and only return the `id`
   * const complaintWithIdOnly = await prisma.complaint.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ComplaintUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ComplaintUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Complaint.
   * @param {ComplaintUpsertArgs} args - Arguments to update or create a Complaint.
   * @example
   * // Update or create a Complaint
   * const complaint = await prisma.complaint.upsert({
   *   create: {
   *     // ... data to create a Complaint
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Complaint we want to update
   *   }
   * })
   */
  upsert<T extends ComplaintUpsertArgs>(args: Prisma.SelectSubset<T, ComplaintUpsertArgs<ExtArgs>>): Prisma.Prisma__ComplaintClient<runtime.Types.Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Complaints.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintCountArgs} args - Arguments to filter Complaints to count.
   * @example
   * // Count the number of Complaints
   * const count = await prisma.complaint.count({
   *   where: {
   *     // ... the filter for the Complaints we want to count
   *   }
   * })
  **/
  count<T extends ComplaintCountArgs>(
    args?: Prisma.Subset<T, ComplaintCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ComplaintCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Complaint.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ComplaintAggregateArgs>(args: Prisma.Subset<T, ComplaintAggregateArgs>): Prisma.PrismaPromise<GetComplaintAggregateType<T>>

  /**
   * Group by Complaint.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ComplaintGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ComplaintGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ComplaintGroupByArgs['orderBy'] }
      : { orderBy?: ComplaintGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ComplaintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplaintGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Complaint model
 */
readonly fields: ComplaintFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Complaint.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ComplaintClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.Complaint$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Complaint$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Complaint model
 */
export interface ComplaintFieldRefs {
  readonly id: Prisma.FieldRef<"Complaint", 'String'>
  readonly userId: Prisma.FieldRef<"Complaint", 'String'>
  readonly name: Prisma.FieldRef<"Complaint", 'String'>
  readonly email: Prisma.FieldRef<"Complaint", 'String'>
  readonly department: Prisma.FieldRef<"Complaint", 'String'>
  readonly subject: Prisma.FieldRef<"Complaint", 'String'>
  readonly message: Prisma.FieldRef<"Complaint", 'String'>
  readonly status: Prisma.FieldRef<"Complaint", 'ComplaintStatus'>
  readonly resolvedBy: Prisma.FieldRef<"Complaint", 'String'>
  readonly resolvedAt: Prisma.FieldRef<"Complaint", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Complaint", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Complaint", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Complaint findUnique
 */
export type ComplaintFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  /**
   * Filter, which Complaint to fetch.
   */
  where: Prisma.ComplaintWhereUniqueInput
}

/**
 * Complaint findUniqueOrThrow
 */
export type ComplaintFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  /**
   * Filter, which Complaint to fetch.
   */
  where: Prisma.ComplaintWhereUniqueInput
}

/**
 * Complaint findFirst
 */
export type ComplaintFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  /**
   * Filter, which Complaint to fetch.
   */
  where?: Prisma.ComplaintWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Complaints to fetch.
   */
  orderBy?: Prisma.ComplaintOrderByWithRelationInput | Prisma.ComplaintOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Complaints.
   */
  cursor?: Prisma.ComplaintWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Complaints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Complaints.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Complaints.
   */
  distinct?: Prisma.ComplaintScalarFieldEnum | Prisma.ComplaintScalarFieldEnum[]
}

/**
 * Complaint findFirstOrThrow
 */
export type ComplaintFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  /**
   * Filter, which Complaint to fetch.
   */
  where?: Prisma.ComplaintWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Complaints to fetch.
   */
  orderBy?: Prisma.ComplaintOrderByWithRelationInput | Prisma.ComplaintOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Complaints.
   */
  cursor?: Prisma.ComplaintWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Complaints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Complaints.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Complaints.
   */
  distinct?: Prisma.ComplaintScalarFieldEnum | Prisma.ComplaintScalarFieldEnum[]
}

/**
 * Complaint findMany
 */
export type ComplaintFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  /**
   * Filter, which Complaints to fetch.
   */
  where?: Prisma.ComplaintWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Complaints to fetch.
   */
  orderBy?: Prisma.ComplaintOrderByWithRelationInput | Prisma.ComplaintOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Complaints.
   */
  cursor?: Prisma.ComplaintWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Complaints from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Complaints.
   */
  skip?: number
  distinct?: Prisma.ComplaintScalarFieldEnum | Prisma.ComplaintScalarFieldEnum[]
}

/**
 * Complaint create
 */
export type ComplaintCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  /**
   * The data needed to create a Complaint.
   */
  data: Prisma.XOR<Prisma.ComplaintCreateInput, Prisma.ComplaintUncheckedCreateInput>
}

/**
 * Complaint createMany
 */
export type ComplaintCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Complaints.
   */
  data: Prisma.ComplaintCreateManyInput | Prisma.ComplaintCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Complaint createManyAndReturn
 */
export type ComplaintCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * The data used to create many Complaints.
   */
  data: Prisma.ComplaintCreateManyInput | Prisma.ComplaintCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Complaint update
 */
export type ComplaintUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  /**
   * The data needed to update a Complaint.
   */
  data: Prisma.XOR<Prisma.ComplaintUpdateInput, Prisma.ComplaintUncheckedUpdateInput>
  /**
   * Choose, which Complaint to update.
   */
  where: Prisma.ComplaintWhereUniqueInput
}

/**
 * Complaint updateMany
 */
export type ComplaintUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Complaints.
   */
  data: Prisma.XOR<Prisma.ComplaintUpdateManyMutationInput, Prisma.ComplaintUncheckedUpdateManyInput>
  /**
   * Filter which Complaints to update
   */
  where?: Prisma.ComplaintWhereInput
  /**
   * Limit how many Complaints to update.
   */
  limit?: number
}

/**
 * Complaint updateManyAndReturn
 */
export type ComplaintUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * The data used to update Complaints.
   */
  data: Prisma.XOR<Prisma.ComplaintUpdateManyMutationInput, Prisma.ComplaintUncheckedUpdateManyInput>
  /**
   * Filter which Complaints to update
   */
  where?: Prisma.ComplaintWhereInput
  /**
   * Limit how many Complaints to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Complaint upsert
 */
export type ComplaintUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  /**
   * The filter to search for the Complaint to update in case it exists.
   */
  where: Prisma.ComplaintWhereUniqueInput
  /**
   * In case the Complaint found by the `where` argument doesn't exist, create a new Complaint with this data.
   */
  create: Prisma.XOR<Prisma.ComplaintCreateInput, Prisma.ComplaintUncheckedCreateInput>
  /**
   * In case the Complaint was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ComplaintUpdateInput, Prisma.ComplaintUncheckedUpdateInput>
}

/**
 * Complaint delete
 */
export type ComplaintDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
  /**
   * Filter which Complaint to delete.
   */
  where: Prisma.ComplaintWhereUniqueInput
}

/**
 * Complaint deleteMany
 */
export type ComplaintDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Complaints to delete
   */
  where?: Prisma.ComplaintWhereInput
  /**
   * Limit how many Complaints to delete.
   */
  limit?: number
}

/**
 * Complaint.user
 */
export type Complaint$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * Complaint without action
 */
export type ComplaintDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Complaint
   */
  select?: Prisma.ComplaintSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Complaint
   */
  omit?: Prisma.ComplaintOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ComplaintInclude<ExtArgs> | null
}
