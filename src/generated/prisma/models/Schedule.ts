
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Schedule` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Schedule
 * 
 */
export type ScheduleModel = runtime.Types.Result.DefaultSelection<Prisma.$SchedulePayload>

export type AggregateSchedule = {
  _count: ScheduleCountAggregateOutputType | null
  _min: ScheduleMinAggregateOutputType | null
  _max: ScheduleMaxAggregateOutputType | null
}

export type ScheduleMinAggregateOutputType = {
  id: string | null
  courseCode: string | null
  dayOfWeek: $Enums.DayOfWeek | null
  startTime: string | null
  endTime: string | null
  venue: string | null
  type: $Enums.ClassType | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ScheduleMaxAggregateOutputType = {
  id: string | null
  courseCode: string | null
  dayOfWeek: $Enums.DayOfWeek | null
  startTime: string | null
  endTime: string | null
  venue: string | null
  type: $Enums.ClassType | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ScheduleCountAggregateOutputType = {
  id: number
  courseCode: number
  dayOfWeek: number
  startTime: number
  endTime: number
  venue: number
  type: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ScheduleMinAggregateInputType = {
  id?: true
  courseCode?: true
  dayOfWeek?: true
  startTime?: true
  endTime?: true
  venue?: true
  type?: true
  createdAt?: true
  updatedAt?: true
}

export type ScheduleMaxAggregateInputType = {
  id?: true
  courseCode?: true
  dayOfWeek?: true
  startTime?: true
  endTime?: true
  venue?: true
  type?: true
  createdAt?: true
  updatedAt?: true
}

export type ScheduleCountAggregateInputType = {
  id?: true
  courseCode?: true
  dayOfWeek?: true
  startTime?: true
  endTime?: true
  venue?: true
  type?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ScheduleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Schedule to aggregate.
   */
  where?: Prisma.ScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Schedules to fetch.
   */
  orderBy?: Prisma.ScheduleOrderByWithRelationInput | Prisma.ScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Schedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Schedules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Schedules
  **/
  _count?: true | ScheduleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ScheduleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ScheduleMaxAggregateInputType
}

export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
      [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSchedule[P]>
    : Prisma.GetScalarType<T[P], AggregateSchedule[P]>
}




export type ScheduleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScheduleWhereInput
  orderBy?: Prisma.ScheduleOrderByWithAggregationInput | Prisma.ScheduleOrderByWithAggregationInput[]
  by: Prisma.ScheduleScalarFieldEnum[] | Prisma.ScheduleScalarFieldEnum
  having?: Prisma.ScheduleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ScheduleCountAggregateInputType | true
  _min?: ScheduleMinAggregateInputType
  _max?: ScheduleMaxAggregateInputType
}

export type ScheduleGroupByOutputType = {
  id: string
  courseCode: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  venue: string
  type: $Enums.ClassType
  createdAt: Date
  updatedAt: Date
  _count: ScheduleCountAggregateOutputType | null
  _min: ScheduleMinAggregateOutputType | null
  _max: ScheduleMaxAggregateOutputType | null
}

type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ScheduleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScheduleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScheduleGroupByOutputType[P]>
      }
    >
  > 



export type ScheduleWhereInput = {
  AND?: Prisma.ScheduleWhereInput | Prisma.ScheduleWhereInput[]
  OR?: Prisma.ScheduleWhereInput[]
  NOT?: Prisma.ScheduleWhereInput | Prisma.ScheduleWhereInput[]
  id?: Prisma.StringFilter<"Schedule"> | string
  courseCode?: Prisma.StringFilter<"Schedule"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekFilter<"Schedule"> | $Enums.DayOfWeek
  startTime?: Prisma.StringFilter<"Schedule"> | string
  endTime?: Prisma.StringFilter<"Schedule"> | string
  venue?: Prisma.StringFilter<"Schedule"> | string
  type?: Prisma.EnumClassTypeFilter<"Schedule"> | $Enums.ClassType
  createdAt?: Prisma.DateTimeFilter<"Schedule"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Schedule"> | Date | string
  course?: Prisma.XOR<Prisma.CourseScalarRelationFilter, Prisma.CourseWhereInput>
}

export type ScheduleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  courseCode?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  venue?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  course?: Prisma.CourseOrderByWithRelationInput
}

export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ScheduleWhereInput | Prisma.ScheduleWhereInput[]
  OR?: Prisma.ScheduleWhereInput[]
  NOT?: Prisma.ScheduleWhereInput | Prisma.ScheduleWhereInput[]
  courseCode?: Prisma.StringFilter<"Schedule"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekFilter<"Schedule"> | $Enums.DayOfWeek
  startTime?: Prisma.StringFilter<"Schedule"> | string
  endTime?: Prisma.StringFilter<"Schedule"> | string
  venue?: Prisma.StringFilter<"Schedule"> | string
  type?: Prisma.EnumClassTypeFilter<"Schedule"> | $Enums.ClassType
  createdAt?: Prisma.DateTimeFilter<"Schedule"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Schedule"> | Date | string
  course?: Prisma.XOR<Prisma.CourseScalarRelationFilter, Prisma.CourseWhereInput>
}, "id">

export type ScheduleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  courseCode?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  venue?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ScheduleCountOrderByAggregateInput
  _max?: Prisma.ScheduleMaxOrderByAggregateInput
  _min?: Prisma.ScheduleMinOrderByAggregateInput
}

export type ScheduleScalarWhereWithAggregatesInput = {
  AND?: Prisma.ScheduleScalarWhereWithAggregatesInput | Prisma.ScheduleScalarWhereWithAggregatesInput[]
  OR?: Prisma.ScheduleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ScheduleScalarWhereWithAggregatesInput | Prisma.ScheduleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Schedule"> | string
  courseCode?: Prisma.StringWithAggregatesFilter<"Schedule"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekWithAggregatesFilter<"Schedule"> | $Enums.DayOfWeek
  startTime?: Prisma.StringWithAggregatesFilter<"Schedule"> | string
  endTime?: Prisma.StringWithAggregatesFilter<"Schedule"> | string
  venue?: Prisma.StringWithAggregatesFilter<"Schedule"> | string
  type?: Prisma.EnumClassTypeWithAggregatesFilter<"Schedule"> | $Enums.ClassType
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Schedule"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Schedule"> | Date | string
}

export type ScheduleCreateInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  venue: string
  type?: $Enums.ClassType
  createdAt?: Date | string
  updatedAt?: Date | string
  course: Prisma.CourseCreateNestedOneWithoutSchedulesInput
}

export type ScheduleUncheckedCreateInput = {
  id?: string
  courseCode: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  venue: string
  type?: $Enums.ClassType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ScheduleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  venue?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  course?: Prisma.CourseUpdateOneRequiredWithoutSchedulesNestedInput
}

export type ScheduleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  courseCode?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  venue?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduleCreateManyInput = {
  id?: string
  courseCode: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  venue: string
  type?: $Enums.ClassType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ScheduleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  venue?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  courseCode?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  venue?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduleListRelationFilter = {
  every?: Prisma.ScheduleWhereInput
  some?: Prisma.ScheduleWhereInput
  none?: Prisma.ScheduleWhereInput
}

export type ScheduleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ScheduleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  courseCode?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  venue?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ScheduleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  courseCode?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  venue?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ScheduleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  courseCode?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  venue?: Prisma.SortOrder
  type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ScheduleCreateNestedManyWithoutCourseInput = {
  create?: Prisma.XOR<Prisma.ScheduleCreateWithoutCourseInput, Prisma.ScheduleUncheckedCreateWithoutCourseInput> | Prisma.ScheduleCreateWithoutCourseInput[] | Prisma.ScheduleUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutCourseInput | Prisma.ScheduleCreateOrConnectWithoutCourseInput[]
  createMany?: Prisma.ScheduleCreateManyCourseInputEnvelope
  connect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[]
}

export type ScheduleUncheckedCreateNestedManyWithoutCourseInput = {
  create?: Prisma.XOR<Prisma.ScheduleCreateWithoutCourseInput, Prisma.ScheduleUncheckedCreateWithoutCourseInput> | Prisma.ScheduleCreateWithoutCourseInput[] | Prisma.ScheduleUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutCourseInput | Prisma.ScheduleCreateOrConnectWithoutCourseInput[]
  createMany?: Prisma.ScheduleCreateManyCourseInputEnvelope
  connect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[]
}

export type ScheduleUpdateManyWithoutCourseNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduleCreateWithoutCourseInput, Prisma.ScheduleUncheckedCreateWithoutCourseInput> | Prisma.ScheduleCreateWithoutCourseInput[] | Prisma.ScheduleUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutCourseInput | Prisma.ScheduleCreateOrConnectWithoutCourseInput[]
  upsert?: Prisma.ScheduleUpsertWithWhereUniqueWithoutCourseInput | Prisma.ScheduleUpsertWithWhereUniqueWithoutCourseInput[]
  createMany?: Prisma.ScheduleCreateManyCourseInputEnvelope
  set?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[]
  disconnect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[]
  delete?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[]
  connect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[]
  update?: Prisma.ScheduleUpdateWithWhereUniqueWithoutCourseInput | Prisma.ScheduleUpdateWithWhereUniqueWithoutCourseInput[]
  updateMany?: Prisma.ScheduleUpdateManyWithWhereWithoutCourseInput | Prisma.ScheduleUpdateManyWithWhereWithoutCourseInput[]
  deleteMany?: Prisma.ScheduleScalarWhereInput | Prisma.ScheduleScalarWhereInput[]
}

export type ScheduleUncheckedUpdateManyWithoutCourseNestedInput = {
  create?: Prisma.XOR<Prisma.ScheduleCreateWithoutCourseInput, Prisma.ScheduleUncheckedCreateWithoutCourseInput> | Prisma.ScheduleCreateWithoutCourseInput[] | Prisma.ScheduleUncheckedCreateWithoutCourseInput[]
  connectOrCreate?: Prisma.ScheduleCreateOrConnectWithoutCourseInput | Prisma.ScheduleCreateOrConnectWithoutCourseInput[]
  upsert?: Prisma.ScheduleUpsertWithWhereUniqueWithoutCourseInput | Prisma.ScheduleUpsertWithWhereUniqueWithoutCourseInput[]
  createMany?: Prisma.ScheduleCreateManyCourseInputEnvelope
  set?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[]
  disconnect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[]
  delete?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[]
  connect?: Prisma.ScheduleWhereUniqueInput | Prisma.ScheduleWhereUniqueInput[]
  update?: Prisma.ScheduleUpdateWithWhereUniqueWithoutCourseInput | Prisma.ScheduleUpdateWithWhereUniqueWithoutCourseInput[]
  updateMany?: Prisma.ScheduleUpdateManyWithWhereWithoutCourseInput | Prisma.ScheduleUpdateManyWithWhereWithoutCourseInput[]
  deleteMany?: Prisma.ScheduleScalarWhereInput | Prisma.ScheduleScalarWhereInput[]
}

export type EnumDayOfWeekFieldUpdateOperationsInput = {
  set?: $Enums.DayOfWeek
}

export type EnumClassTypeFieldUpdateOperationsInput = {
  set?: $Enums.ClassType
}

export type ScheduleCreateWithoutCourseInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  venue: string
  type?: $Enums.ClassType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ScheduleUncheckedCreateWithoutCourseInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  venue: string
  type?: $Enums.ClassType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ScheduleCreateOrConnectWithoutCourseInput = {
  where: Prisma.ScheduleWhereUniqueInput
  create: Prisma.XOR<Prisma.ScheduleCreateWithoutCourseInput, Prisma.ScheduleUncheckedCreateWithoutCourseInput>
}

export type ScheduleCreateManyCourseInputEnvelope = {
  data: Prisma.ScheduleCreateManyCourseInput | Prisma.ScheduleCreateManyCourseInput[]
  skipDuplicates?: boolean
}

export type ScheduleUpsertWithWhereUniqueWithoutCourseInput = {
  where: Prisma.ScheduleWhereUniqueInput
  update: Prisma.XOR<Prisma.ScheduleUpdateWithoutCourseInput, Prisma.ScheduleUncheckedUpdateWithoutCourseInput>
  create: Prisma.XOR<Prisma.ScheduleCreateWithoutCourseInput, Prisma.ScheduleUncheckedCreateWithoutCourseInput>
}

export type ScheduleUpdateWithWhereUniqueWithoutCourseInput = {
  where: Prisma.ScheduleWhereUniqueInput
  data: Prisma.XOR<Prisma.ScheduleUpdateWithoutCourseInput, Prisma.ScheduleUncheckedUpdateWithoutCourseInput>
}

export type ScheduleUpdateManyWithWhereWithoutCourseInput = {
  where: Prisma.ScheduleScalarWhereInput
  data: Prisma.XOR<Prisma.ScheduleUpdateManyMutationInput, Prisma.ScheduleUncheckedUpdateManyWithoutCourseInput>
}

export type ScheduleScalarWhereInput = {
  AND?: Prisma.ScheduleScalarWhereInput | Prisma.ScheduleScalarWhereInput[]
  OR?: Prisma.ScheduleScalarWhereInput[]
  NOT?: Prisma.ScheduleScalarWhereInput | Prisma.ScheduleScalarWhereInput[]
  id?: Prisma.StringFilter<"Schedule"> | string
  courseCode?: Prisma.StringFilter<"Schedule"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekFilter<"Schedule"> | $Enums.DayOfWeek
  startTime?: Prisma.StringFilter<"Schedule"> | string
  endTime?: Prisma.StringFilter<"Schedule"> | string
  venue?: Prisma.StringFilter<"Schedule"> | string
  type?: Prisma.EnumClassTypeFilter<"Schedule"> | $Enums.ClassType
  createdAt?: Prisma.DateTimeFilter<"Schedule"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Schedule"> | Date | string
}

export type ScheduleCreateManyCourseInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  venue: string
  type?: $Enums.ClassType
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ScheduleUpdateWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  venue?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduleUncheckedUpdateWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  venue?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ScheduleUncheckedUpdateManyWithoutCourseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  venue?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ScheduleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  courseCode?: boolean
  dayOfWeek?: boolean
  startTime?: boolean
  endTime?: boolean
  venue?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}, ExtArgs["result"]["schedule"]>

export type ScheduleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  courseCode?: boolean
  dayOfWeek?: boolean
  startTime?: boolean
  endTime?: boolean
  venue?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}, ExtArgs["result"]["schedule"]>

export type ScheduleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  courseCode?: boolean
  dayOfWeek?: boolean
  startTime?: boolean
  endTime?: boolean
  venue?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}, ExtArgs["result"]["schedule"]>

export type ScheduleSelectScalar = {
  id?: boolean
  courseCode?: boolean
  dayOfWeek?: boolean
  startTime?: boolean
  endTime?: boolean
  venue?: boolean
  type?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ScheduleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "courseCode" | "dayOfWeek" | "startTime" | "endTime" | "venue" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["schedule"]>
export type ScheduleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}
export type ScheduleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}
export type ScheduleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  course?: boolean | Prisma.CourseDefaultArgs<ExtArgs>
}

export type $SchedulePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Schedule"
  objects: {
    course: Prisma.$CoursePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    courseCode: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: string
    endTime: string
    venue: string
    type: $Enums.ClassType
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["schedule"]>
  composites: {}
}

export type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SchedulePayload, S>

export type ScheduleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ScheduleCountAggregateInputType | true
  }

export interface ScheduleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
  /**
   * Find zero or one Schedule that matches the filter.
   * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
   * @example
   * // Get one Schedule
   * const schedule = await prisma.schedule.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScheduleFindUniqueArgs>(args: Prisma.SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ScheduleClient<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Schedule that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
   * @example
   * // Get one Schedule
   * const schedule = await prisma.schedule.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScheduleClient<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Schedule that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
   * @example
   * // Get one Schedule
   * const schedule = await prisma.schedule.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScheduleFindFirstArgs>(args?: Prisma.SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma.Prisma__ScheduleClient<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Schedule that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
   * @example
   * // Get one Schedule
   * const schedule = await prisma.schedule.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScheduleClient<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Schedules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Schedules
   * const schedules = await prisma.schedule.findMany()
   * 
   * // Get first 10 Schedules
   * const schedules = await prisma.schedule.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ScheduleFindManyArgs>(args?: Prisma.SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Schedule.
   * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
   * @example
   * // Create one Schedule
   * const Schedule = await prisma.schedule.create({
   *   data: {
   *     // ... data to create a Schedule
   *   }
   * })
   * 
   */
  create<T extends ScheduleCreateArgs>(args: Prisma.SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma.Prisma__ScheduleClient<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Schedules.
   * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
   * @example
   * // Create many Schedules
   * const schedule = await prisma.schedule.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ScheduleCreateManyArgs>(args?: Prisma.SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Schedules and returns the data saved in the database.
   * @param {ScheduleCreateManyAndReturnArgs} args - Arguments to create many Schedules.
   * @example
   * // Create many Schedules
   * const schedule = await prisma.schedule.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Schedules and only return the `id`
   * const scheduleWithIdOnly = await prisma.schedule.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ScheduleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Schedule.
   * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
   * @example
   * // Delete one Schedule
   * const Schedule = await prisma.schedule.delete({
   *   where: {
   *     // ... filter to delete one Schedule
   *   }
   * })
   * 
   */
  delete<T extends ScheduleDeleteArgs>(args: Prisma.SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma.Prisma__ScheduleClient<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Schedule.
   * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
   * @example
   * // Update one Schedule
   * const schedule = await prisma.schedule.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ScheduleUpdateArgs>(args: Prisma.SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma.Prisma__ScheduleClient<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Schedules.
   * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
   * @example
   * // Delete a few Schedules
   * const { count } = await prisma.schedule.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ScheduleDeleteManyArgs>(args?: Prisma.SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Schedules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Schedules
   * const schedule = await prisma.schedule.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ScheduleUpdateManyArgs>(args: Prisma.SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Schedules and returns the data updated in the database.
   * @param {ScheduleUpdateManyAndReturnArgs} args - Arguments to update many Schedules.
   * @example
   * // Update many Schedules
   * const schedule = await prisma.schedule.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Schedules and only return the `id`
   * const scheduleWithIdOnly = await prisma.schedule.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ScheduleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Schedule.
   * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
   * @example
   * // Update or create a Schedule
   * const schedule = await prisma.schedule.upsert({
   *   create: {
   *     // ... data to create a Schedule
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Schedule we want to update
   *   }
   * })
   */
  upsert<T extends ScheduleUpsertArgs>(args: Prisma.SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma.Prisma__ScheduleClient<runtime.Types.Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Schedules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
   * @example
   * // Count the number of Schedules
   * const count = await prisma.schedule.count({
   *   where: {
   *     // ... the filter for the Schedules we want to count
   *   }
   * })
  **/
  count<T extends ScheduleCountArgs>(
    args?: Prisma.Subset<T, ScheduleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ScheduleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Schedule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ScheduleAggregateArgs>(args: Prisma.Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

  /**
   * Group by Schedule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScheduleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ScheduleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScheduleGroupByArgs['orderBy'] }
      : { orderBy?: ScheduleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Schedule model
 */
readonly fields: ScheduleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Schedule.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  course<T extends Prisma.CourseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CourseDefaultArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Schedule model
 */
export interface ScheduleFieldRefs {
  readonly id: Prisma.FieldRef<"Schedule", 'String'>
  readonly courseCode: Prisma.FieldRef<"Schedule", 'String'>
  readonly dayOfWeek: Prisma.FieldRef<"Schedule", 'DayOfWeek'>
  readonly startTime: Prisma.FieldRef<"Schedule", 'String'>
  readonly endTime: Prisma.FieldRef<"Schedule", 'String'>
  readonly venue: Prisma.FieldRef<"Schedule", 'String'>
  readonly type: Prisma.FieldRef<"Schedule", 'ClassType'>
  readonly createdAt: Prisma.FieldRef<"Schedule", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Schedule", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Schedule findUnique
 */
export type ScheduleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
  /**
   * Filter, which Schedule to fetch.
   */
  where: Prisma.ScheduleWhereUniqueInput
}

/**
 * Schedule findUniqueOrThrow
 */
export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
  /**
   * Filter, which Schedule to fetch.
   */
  where: Prisma.ScheduleWhereUniqueInput
}

/**
 * Schedule findFirst
 */
export type ScheduleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
  /**
   * Filter, which Schedule to fetch.
   */
  where?: Prisma.ScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Schedules to fetch.
   */
  orderBy?: Prisma.ScheduleOrderByWithRelationInput | Prisma.ScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Schedules.
   */
  cursor?: Prisma.ScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Schedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Schedules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Schedules.
   */
  distinct?: Prisma.ScheduleScalarFieldEnum | Prisma.ScheduleScalarFieldEnum[]
}

/**
 * Schedule findFirstOrThrow
 */
export type ScheduleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
  /**
   * Filter, which Schedule to fetch.
   */
  where?: Prisma.ScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Schedules to fetch.
   */
  orderBy?: Prisma.ScheduleOrderByWithRelationInput | Prisma.ScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Schedules.
   */
  cursor?: Prisma.ScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Schedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Schedules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Schedules.
   */
  distinct?: Prisma.ScheduleScalarFieldEnum | Prisma.ScheduleScalarFieldEnum[]
}

/**
 * Schedule findMany
 */
export type ScheduleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
  /**
   * Filter, which Schedules to fetch.
   */
  where?: Prisma.ScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Schedules to fetch.
   */
  orderBy?: Prisma.ScheduleOrderByWithRelationInput | Prisma.ScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Schedules.
   */
  cursor?: Prisma.ScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Schedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Schedules.
   */
  skip?: number
  distinct?: Prisma.ScheduleScalarFieldEnum | Prisma.ScheduleScalarFieldEnum[]
}

/**
 * Schedule create
 */
export type ScheduleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
  /**
   * The data needed to create a Schedule.
   */
  data: Prisma.XOR<Prisma.ScheduleCreateInput, Prisma.ScheduleUncheckedCreateInput>
}

/**
 * Schedule createMany
 */
export type ScheduleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Schedules.
   */
  data: Prisma.ScheduleCreateManyInput | Prisma.ScheduleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Schedule createManyAndReturn
 */
export type ScheduleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * The data used to create many Schedules.
   */
  data: Prisma.ScheduleCreateManyInput | Prisma.ScheduleCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Schedule update
 */
export type ScheduleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
  /**
   * The data needed to update a Schedule.
   */
  data: Prisma.XOR<Prisma.ScheduleUpdateInput, Prisma.ScheduleUncheckedUpdateInput>
  /**
   * Choose, which Schedule to update.
   */
  where: Prisma.ScheduleWhereUniqueInput
}

/**
 * Schedule updateMany
 */
export type ScheduleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Schedules.
   */
  data: Prisma.XOR<Prisma.ScheduleUpdateManyMutationInput, Prisma.ScheduleUncheckedUpdateManyInput>
  /**
   * Filter which Schedules to update
   */
  where?: Prisma.ScheduleWhereInput
  /**
   * Limit how many Schedules to update.
   */
  limit?: number
}

/**
 * Schedule updateManyAndReturn
 */
export type ScheduleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * The data used to update Schedules.
   */
  data: Prisma.XOR<Prisma.ScheduleUpdateManyMutationInput, Prisma.ScheduleUncheckedUpdateManyInput>
  /**
   * Filter which Schedules to update
   */
  where?: Prisma.ScheduleWhereInput
  /**
   * Limit how many Schedules to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Schedule upsert
 */
export type ScheduleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
  /**
   * The filter to search for the Schedule to update in case it exists.
   */
  where: Prisma.ScheduleWhereUniqueInput
  /**
   * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
   */
  create: Prisma.XOR<Prisma.ScheduleCreateInput, Prisma.ScheduleUncheckedCreateInput>
  /**
   * In case the Schedule was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ScheduleUpdateInput, Prisma.ScheduleUncheckedUpdateInput>
}

/**
 * Schedule delete
 */
export type ScheduleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
  /**
   * Filter which Schedule to delete.
   */
  where: Prisma.ScheduleWhereUniqueInput
}

/**
 * Schedule deleteMany
 */
export type ScheduleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Schedules to delete
   */
  where?: Prisma.ScheduleWhereInput
  /**
   * Limit how many Schedules to delete.
   */
  limit?: number
}

/**
 * Schedule without action
 */
export type ScheduleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Schedule
   */
  select?: Prisma.ScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Schedule
   */
  omit?: Prisma.ScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScheduleInclude<ExtArgs> | null
}
