// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String    @id @default(cuid())
    matricNO           String    @unique
    email              String    @unique
    password           String
    name               String?
    role               Role      @default(STUDENT)
    isActive           Boolean   @default(true)
    lastLoginAt        DateTime?
    resetToken         String?   @unique
    resetTokenExpiry   DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt

    complaints        Complaint[]
    verificationCodes VerificationCode[]

    @@map("users")
}

model Department {
    id        String   @id @default(cuid())
    name      String
    code      String   @unique
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    courses Course[]

    @@map("departments")
}

model Course {
    id             String   @id @default(cuid())
    code           String   @unique
    name           String
    level          Level
    credits        Int      @default(2)
    departmentCode String
    isActive       Boolean  @default(true)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    department Department @relation(fields: [departmentCode], references: [code], onDelete: Cascade)
    schedules  Schedule[]

    @@map("courses")
}

model Schedule {
    id         String    @id @default(cuid())
    courseCode String
    dayOfWeek  DayOfWeek
    startTime  String // Format: "HH:MM"
    endTime    String // Format: "HH:MM"
    venue      String
    type       ClassType @default(LECTURE)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    course Course @relation(fields: [courseCode], references: [code], onDelete: Cascade)

    @@map("schedules")
}

model Complaint {
    id         String          @id @default(cuid())
    userId     String?
    name       String
    email      String
    department String
    subject    String
    message    String
    status     ComplaintStatus @default(PENDING)
    resolvedBy String?
    resolvedAt DateTime?
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt

    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@map("complaints")
}

model VerificationCode {
    id          String   @id @default(cuid())
    code        String   @unique
    role        Role
    description String?
    isActive    Boolean  @default(true)
    usageCount  Int      @default(0)
    maxUsage    Int?     // null means unlimited usage
    expiresAt   DateTime?
    createdBy   String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

    @@map("verification_codes")
}

enum Role {
    STUDENT
    LECTURER
    ADMIN
}

enum Level {
    LEVEL_100
    LEVEL_200
    LEVEL_300
    LEVEL_400
    LEVEL_500
}

enum DayOfWeek {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum ComplaintStatus {
    PENDING
    IN_PROGRESS
    RESOLVED
    CLOSED
}

enum ClassType {
    LECTURE
    SEMINAR
    LAB
    TUTORIAL
}
